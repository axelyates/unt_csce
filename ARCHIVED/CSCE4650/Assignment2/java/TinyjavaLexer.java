/* The following code was generated by JFlex 1.4.3 on 2/7/18 5:49 PM */

import java_cup . runtime . *;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/7/18 5:49 PM from the specification file
 * <tt>Tinyjava.jflex</tt>
 */
class TinyjavaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\25\0\1\3\1\16\4\0\1\10\1\0\1\23"+
    "\1\24\1\27\1\25\1\7\1\26\1\6\1\11\12\2\1\5\1\4"+
    "\1\13\1\14\1\15\2\0\10\1\1\56\11\1\1\50\7\1\1\21"+
    "\1\0\1\22\1\0\1\30\1\0\1\44\1\40\1\42\1\46\1\52"+
    "\1\57\1\51\1\61\1\31\2\1\1\41\1\32\1\47\1\34\1\33"+
    "\1\1\1\35\1\43\1\36\1\37\1\45\1\53\1\55\1\54\1\60"+
    "\1\17\1\12\1\20\54\0\1\1\12\0\1\1\4\0\1\1\5\0"+
    "\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0"+
    "\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0\4\1\10\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\123\1\1\0"+
    "\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0\47\1\110\0"+
    "\33\1\5\0\3\1\55\0\53\1\25\0\12\2\4\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\2\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\16\0"+
    "\12\2\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1"+
    "\11\0\1\1\3\0\1\1\27\0\31\1\107\0\1\1\1\0\13\1"+
    "\127\0\66\1\3\0\1\1\22\0\1\1\7\0\12\1\4\0\12\2"+
    "\1\0\7\1\1\0\7\1\5\0\10\1\2\0\2\1\2\0\26\1"+
    "\1\0\7\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1"+
    "\15\0\2\1\1\0\3\1\4\0\12\2\2\1\23\0\6\1\4\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\37\0\4\1\1\0\1\1\7\0\12\2\2\0\3\1\20\0"+
    "\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\22\0\1\1\17\0\2\1\4\0\12\2\25\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\36\0\2\1\1\0\3\1\4\0\12\2\1\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\25\0\12\2\25\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\32\0\2\1\6\0"+
    "\2\1\4\0\12\2\25\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0\2\1\4\0"+
    "\12\2\1\0\2\1\22\0\10\1\1\0\3\1\1\0\51\1\2\0"+
    "\1\1\20\0\1\1\21\0\2\1\4\0\12\2\12\0\6\1\5\0"+
    "\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0\7\1\72\0"+
    "\60\1\1\0\2\1\14\0\7\1\11\0\12\2\47\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\11\0"+
    "\12\2\2\0\4\1\40\0\1\1\37\0\12\2\26\0\10\1\1\0"+
    "\44\1\33\0\5\1\163\0\53\1\24\0\1\1\12\2\6\0\6\1"+
    "\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1"+
    "\14\0\1\1\1\0\12\2\6\0\46\1\1\0\1\1\5\0\1\1"+
    "\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1"+
    "\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1"+
    "\1\0\4\1\2\0\103\1\45\0\20\1\20\0\125\1\14\0\u026c\1"+
    "\2\0\21\1\1\0\32\1\5\0\113\1\25\0\15\1\1\0\4\1"+
    "\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1\17\0\64\1"+
    "\43\0\1\1\4\0\1\1\3\0\12\2\46\0\12\2\6\0\130\1"+
    "\10\0\51\1\1\0\1\1\5\0\106\1\12\0\35\1\51\0\12\2"+
    "\36\1\2\0\5\1\13\0\54\1\25\0\7\1\10\0\12\2\46\0"+
    "\27\1\11\0\65\1\53\0\12\2\6\0\12\2\15\0\1\1\135\0"+
    "\57\1\21\0\7\1\4\0\12\2\51\0\36\1\15\0\2\1\12\2"+
    "\54\1\32\0\44\1\34\0\12\2\3\0\3\1\12\2\44\1\153\0"+
    "\4\1\1\0\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0"+
    "\6\1\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0"+
    "\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0"+
    "\15\1\5\0\3\1\1\0\7\1\164\0\1\1\15\0\1\1\20\0"+
    "\15\1\145\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0"+
    "\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\13\1\2\0\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0"+
    "\57\1\1\0\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0"+
    "\46\1\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0"+
    "\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0"+
    "\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0"+
    "\132\1\1\0\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0"+
    "\20\1\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0"+
    "\u010d\1\3\0\20\1\12\2\2\1\24\0\57\1\20\0\31\1\10\0"+
    "\106\1\61\0\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0"+
    "\13\1\115\0\12\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0"+
    "\64\1\16\0\62\1\34\0\12\2\30\0\6\1\3\0\1\1\4\0"+
    "\12\2\34\1\12\0\27\1\31\0\35\1\7\0\57\1\34\0\1\1"+
    "\12\2\46\0\51\1\27\0\3\1\1\0\10\1\4\0\12\2\6\0"+
    "\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0\2\1\2\0"+
    "\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0\13\1\7\0"+
    "\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\1\0"+
    "\7\1\221\0\43\1\15\0\12\2\6\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\23\0\12\2\7\0"+
    "\32\1\6\0\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0"+
    "\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\1\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\21\2\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\2\1\36\1\37\20\2\1\40\12\2\1\41"+
    "\4\2\1\42\1\43\13\2\1\44\1\45\5\2\1\46"+
    "\4\2\1\47\4\2\1\50\1\51\4\2\1\52\1\2"+
    "\1\53\1\54\4\2\1\55\11\2\1\56\1\57\1\60"+
    "\5\2\1\61\1\62\1\63\3\2\1\64\1\65\1\2"+
    "\1\66\1\2\1\67\1\2\1\70\1\2\1\71\1\2"+
    "\1\72\1\73\1\74\3\2\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\62\0\310\0\62"+
    "\0\62\0\372\0\u012c\0\62\0\u015e\0\62\0\u0190\0\u01c2"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\u0546\0\u0578\0\144\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\144\0\u08ca\0\u08fc\0\u092e"+
    "\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\144"+
    "\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\144\0\144\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\144\0\144\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\144\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\144\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\144\0\144\0\u1036\0\u1068\0\u109a\0\u10cc"+
    "\0\144\0\u10fe\0\144\0\144\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\144\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324"+
    "\0\u1356\0\u1388\0\144\0\144\0\144\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\144\0\144\0\144\0\u14b4\0\u14e6\0\u1518"+
    "\0\144\0\144\0\u154a\0\144\0\u157c\0\144\0\u15ae\0\144"+
    "\0\u15e0\0\144\0\u1612\0\144\0\144\0\144\0\u1644\0\u1676"+
    "\0\u16a8\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\3"+
    "\1\41\1\3\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\3\1\51\1\52\3\3\1\53\2\3\63\0"+
    "\2\3\26\0\31\3\2\0\1\4\73\0\1\54\55\0"+
    "\1\55\62\0\1\56\64\0\1\57\61\0\1\60\61\0"+
    "\1\61\46\0\2\3\26\0\1\3\1\62\14\3\1\63"+
    "\7\3\1\64\2\3\1\0\2\3\26\0\13\3\1\65"+
    "\15\3\1\0\2\3\26\0\4\3\1\66\1\3\1\67"+
    "\22\3\1\0\2\3\26\0\6\3\1\70\6\3\1\71"+
    "\13\3\1\0\2\3\26\0\21\3\1\72\7\3\1\0"+
    "\2\3\26\0\30\3\1\73\1\0\2\3\26\0\3\3"+
    "\1\74\15\3\1\75\7\3\1\0\2\3\26\0\3\3"+
    "\1\76\4\3\1\77\2\3\1\100\15\3\1\0\2\3"+
    "\26\0\5\3\1\101\23\3\1\0\2\3\26\0\4\3"+
    "\1\102\24\3\1\0\2\3\26\0\3\3\1\103\7\3"+
    "\1\104\15\3\1\0\2\3\26\0\3\3\1\105\25\3"+
    "\1\0\2\3\26\0\21\3\1\106\7\3\1\0\2\3"+
    "\26\0\5\3\1\107\3\3\1\110\11\3\1\111\5\3"+
    "\1\0\2\3\26\0\10\3\1\112\5\3\1\113\12\3"+
    "\1\0\2\3\26\0\30\3\1\114\1\0\2\3\26\0"+
    "\13\3\1\115\15\3\1\0\2\3\26\0\2\3\1\116"+
    "\26\3\1\0\2\3\26\0\1\117\4\3\1\120\23\3"+
    "\1\0\2\3\26\0\1\121\30\3\1\0\2\3\26\0"+
    "\1\122\2\3\1\123\25\3\1\0\2\3\26\0\7\3"+
    "\1\124\21\3\1\0\2\3\26\0\5\3\1\125\23\3"+
    "\1\0\2\3\26\0\15\3\1\126\13\3\1\0\2\3"+
    "\26\0\5\3\1\127\23\3\1\0\2\3\26\0\1\130"+
    "\20\3\1\131\7\3\1\0\2\3\26\0\3\3\1\132"+
    "\25\3\1\0\2\3\26\0\20\3\1\133\10\3\1\0"+
    "\2\3\26\0\16\3\1\134\12\3\1\0\2\3\26\0"+
    "\13\3\1\135\15\3\1\0\2\3\26\0\10\3\1\136"+
    "\20\3\1\0\2\3\26\0\13\3\1\137\15\3\1\0"+
    "\2\3\26\0\20\3\1\140\10\3\1\0\2\3\26\0"+
    "\1\141\30\3\1\0\2\3\26\0\4\3\1\142\24\3"+
    "\1\0\2\3\26\0\22\3\1\143\1\3\1\144\4\3"+
    "\1\0\2\3\26\0\4\3\1\145\24\3\1\0\2\3"+
    "\26\0\13\3\1\146\15\3\1\0\2\3\26\0\12\3"+
    "\1\147\16\3\1\0\2\3\26\0\12\3\1\150\16\3"+
    "\1\0\2\3\26\0\15\3\1\151\13\3\1\0\2\3"+
    "\26\0\1\152\30\3\1\0\2\3\26\0\11\3\1\153"+
    "\17\3\1\0\2\3\26\0\3\3\1\154\25\3\1\0"+
    "\2\3\26\0\5\3\1\155\23\3\1\0\2\3\26\0"+
    "\16\3\1\156\12\3\1\0\2\3\26\0\16\3\1\157"+
    "\12\3\1\0\2\3\26\0\11\3\1\160\17\3\1\0"+
    "\2\3\26\0\10\3\1\161\20\3\1\0\2\3\26\0"+
    "\6\3\1\162\22\3\1\0\2\3\26\0\12\3\1\163"+
    "\16\3\1\0\2\3\26\0\16\3\1\164\12\3\1\0"+
    "\2\3\26\0\10\3\1\165\20\3\1\0\2\3\26\0"+
    "\1\166\30\3\1\0\2\3\26\0\12\3\1\167\16\3"+
    "\1\0\2\3\26\0\12\3\1\170\16\3\1\0\2\3"+
    "\26\0\10\3\1\171\20\3\1\0\2\3\26\0\5\3"+
    "\1\172\23\3\1\0\2\3\26\0\12\3\1\173\16\3"+
    "\1\0\2\3\26\0\15\3\1\174\13\3\1\0\2\3"+
    "\26\0\5\3\1\175\23\3\1\0\2\3\26\0\1\176"+
    "\30\3\1\0\2\3\26\0\16\3\1\177\12\3\1\0"+
    "\2\3\26\0\5\3\1\200\23\3\1\0\2\3\26\0"+
    "\21\3\1\201\7\3\1\0\2\3\26\0\10\3\1\202"+
    "\20\3\1\0\2\3\26\0\5\3\1\203\23\3\1\0"+
    "\2\3\26\0\4\3\1\204\24\3\1\0\2\3\26\0"+
    "\1\205\30\3\1\0\2\3\26\0\5\3\1\206\23\3"+
    "\1\0\2\3\26\0\21\3\1\207\7\3\1\0\2\3"+
    "\26\0\1\210\30\3\1\0\2\3\26\0\4\3\1\211"+
    "\24\3\1\0\2\3\26\0\21\3\1\212\7\3\1\0"+
    "\2\3\26\0\16\3\1\213\12\3\1\0\2\3\26\0"+
    "\5\3\1\214\23\3\1\0\2\3\26\0\12\3\1\215"+
    "\16\3\1\0\2\3\26\0\1\216\30\3\1\0\2\3"+
    "\26\0\25\3\1\217\3\3\1\0\2\3\26\0\16\3"+
    "\1\220\12\3\1\0\2\3\26\0\16\3\1\221\12\3"+
    "\1\0\2\3\26\0\21\3\1\222\7\3\1\0\2\3"+
    "\26\0\21\3\1\223\7\3\1\0\2\3\26\0\3\3"+
    "\1\224\25\3\1\0\2\3\26\0\5\3\1\225\23\3"+
    "\1\0\2\3\26\0\13\3\1\226\15\3\1\0\2\3"+
    "\26\0\10\3\1\227\20\3\1\0\2\3\26\0\15\3"+
    "\1\230\13\3\1\0\2\3\26\0\11\3\1\231\17\3"+
    "\1\0\2\3\26\0\16\3\1\232\12\3\1\0\2\3"+
    "\26\0\13\3\1\233\15\3\1\0\2\3\26\0\11\3"+
    "\1\234\17\3\1\0\2\3\26\0\16\3\1\235\12\3"+
    "\1\0\2\3\26\0\20\3\1\236\10\3\1\0\2\3"+
    "\26\0\21\3\1\237\7\3\1\0\2\3\26\0\1\3"+
    "\1\240\27\3\1\0\2\3\26\0\10\3\1\241\20\3"+
    "\1\0\2\3\26\0\16\3\1\242\12\3\1\0\2\3"+
    "\26\0\6\3\1\243\22\3\1\0\2\3\26\0\16\3"+
    "\1\244\12\3\1\0\2\3\26\0\5\3\1\245\23\3"+
    "\1\0\2\3\26\0\4\3\1\246\24\3\1\0\2\3"+
    "\26\0\1\247\30\3\1\0\2\3\26\0\4\3\1\250"+
    "\24\3\1\0\2\3\26\0\27\3\1\251\1\3\1\0"+
    "\2\3\26\0\21\3\1\252\7\3\1\0\2\3\26\0"+
    "\21\3\1\253\7\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\12\11\21\1\6\11\172\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private SymbolFactory symbolFactory;

  public TinyjavaLexer (java . io . InputStream input, SymbolFactory sf) {
    this (input);
    symbolFactory = sf;
  }

  private void echo () { System . out . print (yytext ()); }

  public int position () { return yycolumn; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TinyjavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  TinyjavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1708) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, nextInt)", Symbol . NEXTINT);
          }
        case 63: break;
        case 42: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, end)", Symbol . CALL);
          }
        case 64: break;
        case 21: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, -)", Symbol . MINUS);
          }
        case 65: break;
        case 47: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, const)", Symbol . CONST);
          }
        case 66: break;
        case 12: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, =)", Symbol . EQ);
          }
        case 67: break;
        case 22: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, *)", Symbol . TIMES);
          }
        case 68: break;
        case 11: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, <)", Symbol . LT);
          }
        case 69: break;
        case 35: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, odd)", Symbol . ODD);
          }
        case 70: break;
        case 61: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, procedure)", Symbol . PROC);
          }
        case 71: break;
        case 55: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, String)", Symbol . STRING);
          }
        case 72: break;
        case 23: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, _)", Symbol . UNDERSCORE);
          }
        case 73: break;
        case 25: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, &&)", Symbol . AND);
          }
        case 74: break;
        case 14: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, {)", Symbol . LCURLY);
          }
        case 75: break;
        case 8: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(punctuation, ,)", Symbol . COMMA);
          }
        case 76: break;
        case 50: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, facto)", Symbol . FACTO);
          }
        case 77: break;
        case 16: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, [)", Symbol . LSQUARE);
          }
        case 78: break;
        case 56: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, System)", Symbol . SYSTEM);
          }
        case 79: break;
        case 27: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, <=)", Symbol . LE);
          }
        case 80: break;
        case 34: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, out)", Symbol . OUT);
          }
        case 81: break;
        case 1: 
          { echo (); ErrorMessage . print (yychar, "Illegal character");
          }
        case 82: break;
        case 38: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, end)", Symbol . END);
          }
        case 83: break;
        case 5: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(punctuation, ;)", Symbol . SEMICOLON);
          }
        case 84: break;
        case 28: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, >=)", Symbol . GE);
          }
        case 85: break;
        case 46: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, begin)", Symbol . BEGIN);
          }
        case 86: break;
        case 41: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, then)", Symbol . THEN);
          }
        case 87: break;
        case 19: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, ))", Symbol . RPAREN);
          }
        case 88: break;
        case 53: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, return)", Symbol . RETURN);
          }
        case 89: break;
        case 6: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(punctuation, :)", Symbol . COLON);
          }
        case 90: break;
        case 57: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, println)", Symbol . PRINTLN);
          }
        case 91: break;
        case 58: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, boolean)", Symbol . BOOLEAN);
          }
        case 92: break;
        case 30: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, in)", Symbol . IN);
          }
        case 93: break;
        case 33: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, int)", Symbol . INT);
          }
        case 94: break;
        case 60: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, Scanner)", Symbol . SCANNER);
          }
        case 95: break;
        case 54: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, static)", Symbol . STATIC);
          }
        case 96: break;
        case 29: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, !=)", Symbol . NE);
          }
        case 97: break;
        case 36: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, var)", Symbol . VAR);
          }
        case 98: break;
        case 24: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, :=)", Symbol . ASSIGN);
          }
        case 99: break;
        case 37: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, new)", Symbol . NEW);
          }
        case 100: break;
        case 51: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, import)", Symbol . IMPORT);
          }
        case 101: break;
        case 7: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(punctuation, .)", Symbol . PERIOD);
          }
        case 102: break;
        case 32: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, do)", Symbol . DO);
          }
        case 103: break;
        case 9: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, /)", Symbol . SLASH);
          }
        case 104: break;
        case 52: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, public)", Symbol . PUBLIC);
          }
        case 105: break;
        case 3: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(integer, " + yytext () + ")", 
                      Symbol . INTEGER, yytext ());
          }
        case 106: break;
        case 31: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, if)", Symbol . IF);
          }
        case 107: break;
        case 49: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(keyword, while)", Symbol . WHILE);
          }
        case 108: break;
        case 26: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, //)", Symbol . COMMENT);
          }
        case 109: break;
        case 10: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, |)", Symbol . BAR);
          }
        case 110: break;
        case 39: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, main)", Symbol . MAIN);
          }
        case 111: break;
        case 44: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, void)", Symbol . VOID);
          }
        case 112: break;
        case 15: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, })", Symbol . RCURLY);
          }
        case 113: break;
        case 40: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, this)", Symbol . THIS);
          }
        case 114: break;
        case 17: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, ])", Symbol . RSQUARE);
          }
        case 115: break;
        case 2: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(identifier, " + yytext () + ")", 
                      Symbol . ID, yytext ());
          }
        case 116: break;
        case 43: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, args)", Symbol . ARGS);
          }
        case 117: break;
        case 20: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, +)", Symbol . PLUS);
          }
        case 118: break;
        case 48: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, class)", Symbol . CLASS);
          }
        case 119: break;
        case 4: 
          { echo ();
          }
        case 120: break;
        case 45: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, else)", Symbol . ELSE);
          }
        case 121: break;
        case 62: 
          { echo ();
				  return symbolFactory .
					newSymbol ("(keyword, initialize)", Symbol . INITIALIZE);
          }
        case 122: break;
        case 13: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, >)", Symbol . GT);
          }
        case 123: break;
        case 18: 
          { echo (); 
                  return symbolFactory . 
                    newSymbol ("(operator, ()", Symbol . LPAREN);
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return symbolFactory . newSymbol ("EOF", Symbol . EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
