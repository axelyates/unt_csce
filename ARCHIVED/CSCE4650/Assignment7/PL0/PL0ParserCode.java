
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 08 09:06:16 CDT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 08 09:06:16 CDT 2018
  */
public class PL0ParserCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PL0ParserCode() {super();}

  /** Constructor which sets the default scanner. */
  public PL0ParserCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PL0ParserCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\023" +
    "\002\000\002\024\002\000\002\003\010\000\002\004\005" +
    "\000\002\004\002\000\002\005\005\000\002\005\007\000" +
    "\002\006\005\000\002\006\002\000\002\007\003\000\002" +
    "\007\005\000\002\025\002\000\002\010\011\000\002\010" +
    "\002\000\002\011\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\006\000\002\011\007\000\002\011\002\000" +
    "\002\013\002\000\002\012\003\000\002\012\005\000\002" +
    "\014\004\000\002\014\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\005\000\002\020\003\000\002\020\003\000\002" +
    "\017\003\000\002\017\005\000\002\022\003\000\002\022" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\024\004\uffff\021\uffff\026\uffff\027\uffff\030" +
    "\uffff\033\uffff\035\uffff\037\uffff\040\uffff\001\002\000\004" +
    "\002\123\001\002\000\026\004\ufffb\020\ufffb\021\ufffb\026" +
    "\ufffb\027\ufffb\030\010\033\ufffb\035\ufffb\037\ufffb\040\ufffb" +
    "\001\002\000\004\021\007\001\002\000\004\002\000\001" +
    "\002\000\004\004\112\001\002\000\024\004\ufff7\020\ufff7" +
    "\021\ufff7\026\ufff7\027\ufff7\033\ufff7\035\ufff7\037\012\040" +
    "\ufff7\001\002\000\004\004\105\001\002\000\022\004\ufff2" +
    "\020\ufff2\021\ufff2\026\ufff2\027\ufff2\033\ufff2\035\ufff2\040" +
    "\ufff2\001\002\000\022\004\ufffe\020\ufffe\021\ufffe\026\ufffe" +
    "\027\ufffe\033\ufffe\035\016\040\ufffe\001\002\000\020\004" +
    "\024\020\uffec\021\uffec\026\025\027\031\033\030\040\027" +
    "\001\002\000\004\004\017\001\002\000\004\020\020\001" +
    "\002\000\024\004\ufff4\020\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\033\ufff4\035\ufff4\037\ufff4\040\ufff4\001\002\000\024\004" +
    "\uffff\020\uffff\026\uffff\027\uffff\030\uffff\033\uffff\035\uffff" +
    "\037\uffff\040\uffff\001\002\000\004\020\023\001\002\000" +
    "\022\004\ufff3\020\ufff3\021\ufff3\026\ufff3\027\ufff3\033\ufff3" +
    "\035\ufff3\040\ufff3\001\002\000\004\025\103\001\002\000" +
    "\020\004\024\020\uffec\026\025\027\031\032\uffec\033\030" +
    "\040\027\001\002\000\006\020\ufffd\021\ufffd\001\002\000" +
    "\016\004\uffeb\005\uffeb\014\uffeb\015\uffeb\023\uffeb\034\uffeb" +
    "\001\002\000\016\004\042\005\034\014\037\015\033\023" +
    "\044\034\040\001\002\000\004\004\032\001\002\000\010" +
    "\020\ufff0\021\ufff0\032\ufff0\001\002\000\010\004\uffdc\005" +
    "\uffdc\023\uffdc\001\002\000\042\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\024\uffd6\031\uffd6\032\uffd6\036\uffd6" +
    "\001\002\000\004\036\070\001\002\000\042\006\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\051\017\050\020\uffe0\021\uffe0\024\uffe0\031\uffe0\032" +
    "\uffe0\036\uffe0\001\002\000\010\004\uffdd\005\uffdd\023\uffdd" +
    "\001\002\000\014\004\042\005\034\014\037\015\033\023" +
    "\044\001\002\000\022\006\065\007\062\010\063\011\060" +
    "\012\061\013\064\014\037\015\033\001\002\000\042\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\031" +
    "\uffd7\032\uffd7\036\uffd7\001\002\000\042\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\024\uffdb\031\uffdb\032\uffdb" +
    "\036\uffdb\001\002\000\014\004\042\005\034\014\037\015" +
    "\033\023\044\001\002\000\010\004\042\005\034\023\044" +
    "\001\002\000\042\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\051\017\050\020\uffdf" +
    "\021\uffdf\024\uffdf\031\uffdf\032\uffdf\036\uffdf\001\002\000" +
    "\010\004\042\005\034\023\044\001\002\000\010\004\uffd8" +
    "\005\uffd8\023\uffd8\001\002\000\010\004\uffd9\005\uffd9\023" +
    "\uffd9\001\002\000\042\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\024\uffda\031\uffda\032\uffda\036\uffda\001\002" +
    "\000\010\014\037\015\033\024\054\001\002\000\042\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\024\uffd5\031" +
    "\uffd5\032\uffd5\036\uffd5\001\002\000\010\004\042\005\034" +
    "\023\044\001\002\000\042\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\051\017\050" +
    "\020\uffde\021\uffde\024\uffde\031\uffde\032\uffde\036\uffde\001" +
    "\002\000\014\004\042\005\034\014\037\015\033\023\044" +
    "\001\002\000\014\004\uffe1\005\uffe1\014\uffe1\015\uffe1\023" +
    "\uffe1\001\002\000\014\004\uffe6\005\uffe6\014\uffe6\015\uffe6" +
    "\023\uffe6\001\002\000\014\004\uffe2\005\uffe2\014\uffe2\015" +
    "\uffe2\023\uffe2\001\002\000\014\004\uffe3\005\uffe3\014\uffe3" +
    "\015\uffe3\023\uffe3\001\002\000\014\004\uffe5\005\uffe5\014" +
    "\uffe5\015\uffe5\023\uffe5\001\002\000\014\004\uffe4\005\uffe4" +
    "\014\uffe4\015\uffe4\023\uffe4\001\002\000\012\014\037\015" +
    "\033\031\uffe7\036\uffe7\001\002\000\012\014\037\015\033" +
    "\031\uffe8\036\uffe8\001\002\000\022\004\024\020\uffec\021" +
    "\uffec\026\025\027\031\032\uffec\033\030\040\027\001\002" +
    "\000\010\020\uffee\021\uffee\032\uffee\001\002\000\016\004" +
    "\042\005\034\014\037\015\033\023\044\034\040\001\002" +
    "\000\004\031\074\001\002\000\022\004\024\020\uffec\021" +
    "\uffec\026\025\027\031\032\uffec\033\030\040\027\001\002" +
    "\000\010\020\uffed\021\uffed\032\uffed\001\002\000\006\020" +
    "\uffea\032\uffea\001\002\000\006\020\100\032\101\001\002" +
    "\000\020\004\024\020\uffec\026\025\027\031\032\uffec\033" +
    "\030\040\027\001\002\000\010\020\uffef\021\uffef\032\uffef" +
    "\001\002\000\006\020\uffe9\032\uffe9\001\002\000\014\004" +
    "\042\005\034\014\037\015\033\023\044\001\002\000\014" +
    "\014\037\015\033\020\ufff1\021\ufff1\032\ufff1\001\002\000" +
    "\006\020\ufff6\022\ufff6\001\002\000\006\020\110\022\107" +
    "\001\002\000\004\004\111\001\002\000\022\004\ufff8\020" +
    "\ufff8\021\ufff8\026\ufff8\027\ufff8\033\ufff8\035\ufff8\040\ufff8" +
    "\001\002\000\006\020\ufff5\022\ufff5\001\002\000\004\012" +
    "\121\001\002\000\006\020\115\022\114\001\002\000\004" +
    "\004\116\001\002\000\024\004\ufffc\020\ufffc\021\ufffc\026" +
    "\ufffc\027\ufffc\033\ufffc\035\ufffc\037\ufffc\040\ufffc\001\002" +
    "\000\004\012\117\001\002\000\004\005\120\001\002\000" +
    "\006\020\ufff9\022\ufff9\001\002\000\004\005\122\001\002" +
    "\000\006\020\ufffa\022\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\003\003\005\023\004\001\001\000" +
    "\002\001\001\000\004\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\112\001\001\000\004\006" +
    "\012\001\001\000\004\007\105\001\001\000\004\010\013" +
    "\001\001\000\004\024\014\001\001\000\004\011\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\020" +
    "\001\001\000\006\003\021\023\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\075" +
    "\012\076\001\001\000\002\001\001\000\004\013\071\001" +
    "\001\000\014\014\034\015\040\017\035\020\044\021\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\046" +
    "\001\001\000\002\001\001\000\012\015\066\017\035\020" +
    "\044\021\042\001\001\000\006\016\056\020\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\052\017" +
    "\035\020\044\021\042\001\001\000\006\017\045\021\042" +
    "\001\001\000\004\022\046\001\001\000\004\021\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\054\001\001\000\002\001\001\000\006\017" +
    "\055\021\042\001\001\000\004\022\046\001\001\000\012" +
    "\015\065\017\035\020\044\021\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\054\001" +
    "\001\000\004\020\054\001\001\000\004\011\070\001\001" +
    "\000\002\001\001\000\014\014\072\015\040\017\035\020" +
    "\044\021\042\001\001\000\002\001\001\000\004\011\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\103\017\035\020\044\021\042\001" +
    "\001\000\004\020\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PL0ParserCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PL0ParserCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PL0ParserCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PL0ParserCode$actions {

 SymbolTable currentEnv, env; 
  private final PL0ParserCode parser;

  /** Constructor */
  CUP$PL0ParserCode$actions(PL0ParserCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PL0ParserCode$do_action(
    int                        CUP$PL0ParserCode$act_num,
    java_cup.runtime.lr_parser CUP$PL0ParserCode$parser,
    java.util.Stack            CUP$PL0ParserCode$stack,
    int                        CUP$PL0ParserCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PL0ParserCode$result;

      /* select the action based on the action number */
      switch (CUP$PL0ParserCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= LPAREN expression RPAREN 
            {
              ExpressionCode RESULT =null;
		int exprCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int exprCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		ExpressionCode exprCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		 RESULT = exprCode; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= INTEGER 
            {
              ExpressionCode RESULT =null;
		int intvalleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int intvalright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String intval = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 RESULT = new ExpressionCode ("", intval); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= ID 
            {
              ExpressionCode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        SymbolTableEntry entry = env . entry (id);
        if (entry == null)
          ErrorMessage . print ("id " + id + " is not declared");
        if (entry . category () == Category . CONSTANT)
          RESULT = new ExpressionCode ("", 
            Integer . toString (entry . value ()));
        else if (entry . category () == Category . VARIABLE)
          RESULT = new ExpressionCode ("", id);
        else {
          ErrorMessage . print ("constant or variable id expected");
          RESULT = null;
        }
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // multiplyingOperator ::= SLASH 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",16, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // multiplyingOperator ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",16, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= term multiplyingOperator factor 
            {
              ExpressionCode RESULT =null;
		int termCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int termCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		ExpressionCode termCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		int factorCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int factorCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode factorCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String termTemp = Code . newTemp ();
        env . enterVar (termTemp);
        RESULT = new ExpressionCode (termCode . code () + factorCode . code ()
          + "  " + termTemp + " = " + termCode . place () + " " + op + " " 
                                    + factorCode . place () + ";\n", termTemp);
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= factor 
            {
              ExpressionCode RESULT =null;
		int factorCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int factorCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode factorCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 RESULT = factorCode; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // addingOperator ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("addingOperator",14, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // addingOperator ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("addingOperator",14, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression addingOperator term 
            {
              ExpressionCode RESULT =null;
		int exprCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int exprCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		ExpressionCode exprCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		int termCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int termCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode termCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String exprTemp = Code . newTemp ();
        env . enterVar (exprTemp);
        RESULT = new ExpressionCode (exprCode . code () + termCode . code ()
          + "  " + exprTemp + " = " + exprCode . place () + " " + op + " " 
                                    + termCode . place () + ";\n", exprTemp);
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= addingOperator term 
            {
              ExpressionCode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		int termCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int termCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode termCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String exprTemp = Code . newTemp ();
        env . enterVar (exprTemp);
        RESULT = new ExpressionCode (termCode . code ()
          + "  " + exprTemp + " = " + op + termCode . place () + ";\n", exprTemp);
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= term 
            {
              ExpressionCode RESULT =null;
		int termCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int termCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode termCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 RESULT = termCode; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // relation ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relation ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relation ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relation ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relation ::= NE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // relation ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("relation",12, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expression relation expression 
            {
              ConditionCode RESULT =null;
		int exprCode1left = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int exprCode1right = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		ExpressionCode exprCode1 = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		int exprCode2left = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int exprCode2right = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode exprCode2 = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String trueLabel = Code . newLabel ();
        String falseLabel = Code . newLabel();
        RESULT = new ConditionCode (exprCode1 . code () + exprCode2 . code () 
          + "  if (" + exprCode1 . place () + " " + op + " " + exprCode2 . place () 
          + ") goto " + trueLabel + ";\n"
          + "  goto " + falseLabel + ";\n"
          + trueLabel + ":\n", trueLabel, falseLabel);
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= ODD expression 
            {
              ConditionCode RESULT =null;
		int exprCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int exprCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode exprCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 
        String trueLabel = Code . newLabel ();
        String falseLabel = Code . newLabel();
        RESULT = new ConditionCode (exprCode . code ()
          + "  if (" + exprCode . place () + " % 2 != 0) goto " + trueLabel + ";\n"
          + "  goto " + falseLabel + ";\n"
          + trueLabel + ":\n", trueLabel, falseLabel);
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementList ::= statementList SEMICOLON statement 
            {
              String RESULT =null;
		int stmtListCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int stmtListCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		String stmtListCode = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int stmtCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int stmtCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String stmtCode = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        RESULT = stmtListCode + stmtCode;
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statementList",8, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementList ::= statement 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 RESULT = code; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statementList",8, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // whileLabel ::= 
            {
              String RESULT =null;
		 RESULT = Code . newLabel (); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("whileLabel",9, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= WHILE whileLabel condition DO statement 
            {
              String RESULT =null;
		int loopEntryLabelleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-3)).left;
		int loopEntryLabelright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-3)).right;
		String loopEntryLabel = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-3)).value;
		int condCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int condCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		ConditionCode condCode = (ConditionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int stmtCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int stmtCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String stmtCode = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String loopExitLabel = condCode . falseLabel ();
        RESULT = loopEntryLabel + ":\n" 
          + condCode . code () 
          + stmtCode
          + "  goto " + loopEntryLabel + ";\n"
          + loopExitLabel + ":\n";
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-4)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= IF condition THEN statement 
            {
              String RESULT =null;
		int condCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int condCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		ConditionCode condCode = (ConditionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int stmtCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int stmtCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String stmtCode = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        String elseLabel = condCode . falseLabel ();
        RESULT = condCode . code () + stmtCode + elseLabel + ":\n";
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-3)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= BEGIN statementList END 
            {
              String RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		
        RESULT = code;
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= CALL ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        RESULT = "  " + id + " ();\n";
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= ID ASSIGN expression 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int exprCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int exprCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		ExpressionCode exprCode = (ExpressionCode)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		
        RESULT = exprCode . code () 
          + "  " + id + " = " + exprCode . place () + ";\n";
      
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procDecl ::= 
            {
              Object RESULT =null;

              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("procDecl",6, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procDecl ::= procDecl PROC ID SEMICOLON NT$2 block SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-4)).value;
		int blockCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int blockCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		Code blockCode = (Code)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		 env . enterProc (id, blockCode . env (), blockCode . code ()); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("procDecl",6, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-6)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
 env . enterProc (id); /* to allow recursive calls  */ 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identList ::= identList COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 env . enterVar (id); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("identList",5, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 env . enterVar (id); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("identList",5, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDecl ::= 
            {
              Object RESULT =null;

              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= VAR identList SEMICOLON 
            {
              Object RESULT =null;

              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("varDecl",4, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constAssignmentList ::= constAssignmentList COMMA ID EQ INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String integer = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 env . enterConst (id, Integer . parseInt (integer)); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("constAssignmentList",3, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-4)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constAssignmentList ::= ID EQ INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String integer = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 env . enterConst (id, Integer . parseInt (integer)); 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("constAssignmentList",3, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constDecl ::= 
            {
              Object RESULT =null;

              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("constDecl",2, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constDecl ::= CONST constAssignmentList SEMICOLON 
            {
              Object RESULT =null;

              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("constDecl",2, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-2)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= NT$0 constDecl varDecl procDecl NT$1 statement 
            {
              Code RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Code) ((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.peek()).value;
		 
       RESULT = new Code (env, code); 
       env = currentEnv; /* restore env */ 
     
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-5)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Code RESULT =(Code) ((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-3)).value;

       Code . initLabel ();
       Code . initTemp ();
     
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Code RESULT =null;
 
       currentEnv = env;         /* save current env */
       env = new SymbolTable (); /* start new scope */
     
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= block PERIOD 
            {
              Code RESULT =null;
		int blockCodeleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int blockCoderight = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		Code blockCode = (Code)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		 RESULT = blockCode; 
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          return CUP$PL0ParserCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).right;
		Code start_val = (Code)((java_cup.runtime.Symbol) CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)).value;
		RESULT = start_val;
              CUP$PL0ParserCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.elementAt(CUP$PL0ParserCode$top-1)), ((java_cup.runtime.Symbol)CUP$PL0ParserCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PL0ParserCode$parser.done_parsing();
          return CUP$PL0ParserCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

