
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 10 09:56:16 CDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import syntaxtree.*;
import visitor.*;
import helper.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 10 09:56:16 CDT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\003\022\000\002\003\005\000\002\004\010" +
    "\000\002\004\012\000\002\004\004\000\002\005\004\000" +
    "\002\005\002\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\007\004\000\002\007\002\000\002\010" +
    "\016\000\002\010\020\000\002\010\004\000\002\011\004" +
    "\000\002\011\002\000\002\012\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\014\004\000\002" +
    "\014\004\000\002\013\006\000\002\013\002\000\002\015" +
    "\005\000\002\015\011\000\002\015\007\000\002\015\007" +
    "\000\002\015\006\000\002\015\011\000\002\015\004\000" +
    "\002\016\004\000\002\016\002\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\006\000\002\017\005\000\002\017\007" +
    "\000\002\017\011\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\007\000\002\017\006\000\002\017" +
    "\004\000\002\017\005\000\002\020\005\000\002\020\002" +
    "\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\003\006\025\007\001\002\000\004\002" +
    "\256\001\002\000\010\002\ufff8\003\154\025\155\001\002" +
    "\000\004\010\151\001\002\000\004\047\011\001\002\000" +
    "\004\007\012\001\002\000\044\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\027\uffc7" +
    "\047\uffc7\001\002\000\004\036\013\001\002\000\004\040" +
    "\014\001\002\000\004\045\015\001\002\000\004\034\016" +
    "\001\002\000\004\011\017\001\002\000\004\041\020\001" +
    "\002\000\004\013\021\001\002\000\004\014\022\001\002" +
    "\000\004\047\011\001\002\000\004\012\024\001\002\000" +
    "\004\007\025\001\002\000\020\003\033\007\034\010\035" +
    "\031\030\042\027\046\026\047\011\001\002\000\004\011" +
    "\145\001\002\000\004\011\141\001\002\000\004\011\133" +
    "\001\002\000\006\013\047\023\046\001\002\000\004\010" +
    "\044\001\002\000\004\006\043\001\002\000\020\003\033" +
    "\007\034\010\uffdd\031\030\042\027\046\026\047\011\001" +
    "\002\000\004\010\036\001\002\000\010\002\ufffe\003\ufffe" +
    "\025\ufffe\001\002\000\004\010\042\001\002\000\022\003" +
    "\033\007\034\010\uffdd\031\030\037\uffdd\042\027\046\026" +
    "\047\011\001\002\000\006\010\uffde\037\uffde\001\002\000" +
    "\024\003\uffe5\007\uffe5\010\uffe5\026\uffe5\031\uffe5\037\uffe5" +
    "\042\uffe5\046\uffe5\047\uffe5\001\002\000\024\003\uffdf\007" +
    "\uffdf\010\uffdf\026\uffdf\031\uffdf\037\uffdf\042\uffdf\046\uffdf" +
    "\047\uffdf\001\002\000\004\010\045\001\002\000\010\002" +
    "\uffff\003\uffff\025\uffff\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\024\011\061\017\057\021\050\030\054" +
    "\035\052\043\060\044\053\047\011\050\051\001\002\000" +
    "\004\050\130\001\002\000\030\004\uffd3\005\uffd3\006\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\001\002\000\006\032\122\047\011\001\002" +
    "\000\030\004\uffd1\005\uffd1\006\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\001\002" +
    "\000\030\004\uffd0\005\uffd0\006\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\001\002" +
    "\000\030\004\uffcf\005\uffcf\006\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\001\002" +
    "\000\022\004\072\013\064\014\115\015\065\016\070\020" +
    "\063\021\071\022\066\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\030\004\uffce\005\uffce\006\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022" +
    "\uffce\001\002\000\024\011\061\017\057\021\050\030\054" +
    "\035\052\043\060\044\053\047\011\050\051\001\002\000" +
    "\022\004\072\012\067\013\064\015\065\016\070\020\063" +
    "\021\071\022\066\001\002\000\024\011\061\017\057\021" +
    "\050\030\054\035\052\043\060\044\053\047\011\050\051" +
    "\001\002\000\024\011\061\017\057\021\050\030\054\035" +
    "\052\043\060\044\053\047\011\050\051\001\002\000\024" +
    "\011\061\017\057\021\050\030\054\035\052\043\060\044" +
    "\053\047\011\050\051\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\030\004\uffca\005\uffca\006\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022" +
    "\uffca\001\002\000\024\011\061\017\057\021\050\030\054" +
    "\035\052\043\060\044\053\047\011\050\051\001\002\000" +
    "\024\011\061\017\057\021\050\030\054\035\052\043\060" +
    "\044\053\047\011\050\051\001\002\000\006\033\074\047" +
    "\011\001\002\000\004\011\075\001\002\000\030\004\uffd6" +
    "\005\uffd6\006\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\001\002\000\026\011\061" +
    "\012\077\017\057\021\050\030\054\035\052\043\060\044" +
    "\053\047\011\050\051\001\002\000\024\004\072\005\101" +
    "\012\uffc8\013\064\015\065\016\070\020\063\021\071\022" +
    "\066\001\002\000\030\004\uffd5\005\uffd5\006\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\001\002\000\004\012\104\001\002\000\024\011\061" +
    "\017\057\021\050\030\054\035\052\043\060\044\053\047" +
    "\011\050\051\001\002\000\024\004\072\005\101\012\uffc8" +
    "\013\064\015\065\016\070\020\063\021\071\022\066\001" +
    "\002\000\004\012\uffc9\001\002\000\030\004\uffd4\005\uffd4" +
    "\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\001\002\000\030\004\072\005\uffd9" +
    "\006\uffd9\012\uffd9\013\064\014\uffd9\015\uffd9\016\uffd9\020" +
    "\063\021\uffd9\022\uffd9\001\002\000\030\004\072\005\uffdb" +
    "\006\uffdb\012\uffdb\013\064\014\uffdb\015\uffdb\016\uffdb\020" +
    "\063\021\071\022\066\001\002\000\030\004\072\005\uffda" +
    "\006\uffda\012\uffda\013\064\014\uffda\015\uffda\016\uffda\020" +
    "\063\021\uffda\022\uffda\001\002\000\030\004\072\005\uffdc" +
    "\006\uffdc\012\uffdc\013\064\014\uffdc\015\uffdc\016\070\020" +
    "\063\021\071\022\066\001\002\000\022\004\072\013\064" +
    "\014\112\015\065\016\070\020\063\021\071\022\066\001" +
    "\002\000\030\004\uffd7\005\uffd7\006\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\001" +
    "\002\000\030\004\072\005\uffd8\006\uffd8\012\uffd8\013\064" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8\001" +
    "\002\000\030\004\072\005\uffcb\006\uffcb\012\uffcb\013\064" +
    "\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\001" +
    "\002\000\004\023\116\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\022\004\072\006\120\013\064\015\065" +
    "\016\070\020\063\021\071\022\066\001\002\000\024\003" +
    "\uffe0\007\uffe0\010\uffe0\026\uffe0\031\uffe0\037\uffe0\042\uffe0" +
    "\046\uffe0\047\uffe0\001\002\000\004\011\126\001\002\000" +
    "\004\013\123\001\002\000\024\011\061\017\057\021\050" +
    "\030\054\035\052\043\060\044\053\047\011\050\051\001" +
    "\002\000\022\004\072\013\064\014\125\015\065\016\070" +
    "\020\063\021\071\022\066\001\002\000\030\004\uffcd\005" +
    "\uffcd\006\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\001\002\000\004\012\127\001" +
    "\002\000\030\004\uffcc\005\uffcc\006\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\001" +
    "\002\000\030\004\uffd2\005\uffd2\006\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\001" +
    "\002\000\022\004\072\006\132\013\064\015\065\016\070" +
    "\020\063\021\071\022\066\001\002\000\024\003\uffe1\007" +
    "\uffe1\010\uffe1\026\uffe1\031\uffe1\037\uffe1\042\uffe1\046\uffe1" +
    "\047\uffe1\001\002\000\024\011\061\017\057\021\050\030" +
    "\054\035\052\043\060\044\053\047\011\050\051\001\002" +
    "\000\022\004\072\012\135\013\064\015\065\016\070\020" +
    "\063\021\071\022\066\001\002\000\016\003\033\007\034" +
    "\031\030\042\027\046\026\047\011\001\002\000\004\026" +
    "\137\001\002\000\016\003\033\007\034\031\030\042\027" +
    "\046\026\047\011\001\002\000\024\003\uffe4\007\uffe4\010" +
    "\uffe4\026\uffe4\031\uffe4\037\uffe4\042\uffe4\046\uffe4\047\uffe4" +
    "\001\002\000\024\011\061\017\057\021\050\030\054\035" +
    "\052\043\060\044\053\047\011\050\051\001\002\000\022" +
    "\004\072\012\143\013\064\015\065\016\070\020\063\021" +
    "\071\022\066\001\002\000\004\006\144\001\002\000\024" +
    "\003\uffe2\007\uffe2\010\uffe2\026\uffe2\031\uffe2\037\uffe2\042" +
    "\uffe2\046\uffe2\047\uffe2\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\022\004\072\012\147\013\064\015\065" +
    "\016\070\020\063\021\071\022\066\001\002\000\016\003" +
    "\033\007\034\031\030\042\027\046\026\047\011\001\002" +
    "\000\024\003\uffe3\007\uffe3\010\uffe3\026\uffe3\031\uffe3\037" +
    "\uffe3\042\uffe3\046\uffe3\047\uffe3\001\002\000\004\010\152" +
    "\001\002\000\010\002\ufffd\003\ufffd\025\ufffd\001\002\000" +
    "\004\002\000\001\002\000\004\010\255\001\002\000\004" +
    "\047\011\001\002\000\010\002\ufff8\003\154\025\155\001" +
    "\002\000\004\002\ufff9\001\002\000\006\007\162\027\161" +
    "\001\002\000\004\047\011\001\002\000\016\003\ufff3\010" +
    "\ufff3\024\ufff3\032\ufff3\036\ufff3\047\ufff3\001\002\000\016" +
    "\003\174\010\uffee\024\167\032\164\036\166\047\011\001" +
    "\002\000\010\003\uffeb\013\246\047\uffeb\001\002\000\004" +
    "\010\245\001\002\000\010\024\167\032\164\047\011\001" +
    "\002\000\006\003\uffec\047\uffec\001\002\000\030\003\ufff4" +
    "\007\ufff4\010\ufff4\024\ufff4\031\ufff4\032\ufff4\036\ufff4\037" +
    "\ufff4\042\ufff4\046\ufff4\047\ufff4\001\002\000\006\003\uffea" +
    "\047\uffea\001\002\000\006\003\202\047\011\001\002\000" +
    "\010\003\201\010\uffee\036\166\001\002\000\006\010\175" +
    "\047\011\001\002\000\010\003\ufff0\010\ufff0\036\ufff0\001" +
    "\002\000\004\006\177\001\002\000\030\003\ufff5\007\ufff5" +
    "\010\ufff5\024\ufff5\031\ufff5\032\ufff5\036\ufff5\037\ufff5\042" +
    "\ufff5\046\ufff5\047\ufff5\001\002\000\004\010\uffef\001\002" +
    "\000\004\010\175\001\002\000\004\006\205\001\002\000" +
    "\004\006\204\001\002\000\030\003\ufff7\007\ufff7\010\ufff7" +
    "\024\ufff7\031\ufff7\032\ufff7\036\ufff7\037\ufff7\042\ufff7\046" +
    "\ufff7\047\ufff7\001\002\000\030\003\ufff6\007\ufff6\010\ufff6" +
    "\024\ufff6\031\ufff6\032\ufff6\036\ufff6\037\ufff6\042\ufff6\046" +
    "\ufff6\047\ufff6\001\002\000\004\047\011\001\002\000\004" +
    "\011\210\001\002\000\012\012\212\024\167\032\164\047" +
    "\011\001\002\000\004\047\011\001\002\000\004\007\213" +
    "\001\002\000\024\003\ufff3\007\ufff3\024\ufff3\031\ufff3\032" +
    "\ufff3\037\ufff3\042\ufff3\046\ufff3\047\ufff3\001\002\000\024" +
    "\003\217\007\034\024\167\031\030\032\164\037\uffdd\042" +
    "\027\046\026\047\011\001\002\000\004\037\220\001\002" +
    "\000\012\003\uffea\013\047\023\046\047\uffea\001\002\000" +
    "\006\006\043\047\011\001\002\000\024\011\061\017\057" +
    "\021\050\030\054\035\052\043\060\044\053\047\011\050" +
    "\051\001\002\000\022\004\072\006\222\013\064\015\065" +
    "\016\070\020\063\021\071\022\066\001\002\000\004\010" +
    "\223\001\002\000\010\003\ufff2\010\ufff2\036\ufff2\001\002" +
    "\000\010\003\226\005\225\012\uffe6\001\002\000\010\024" +
    "\167\032\164\047\011\001\002\000\004\012\241\001\002" +
    "\000\004\012\240\001\002\000\004\007\231\001\002\000" +
    "\024\003\ufff3\007\ufff3\024\ufff3\031\ufff3\032\ufff3\037\ufff3" +
    "\042\ufff3\046\ufff3\047\ufff3\001\002\000\024\003\217\007" +
    "\034\024\167\031\030\032\164\037\uffdd\042\027\046\026" +
    "\047\011\001\002\000\004\037\234\001\002\000\024\011" +
    "\061\017\057\021\050\030\054\035\052\043\060\044\053" +
    "\047\011\050\051\001\002\000\022\004\072\006\236\013" +
    "\064\015\065\016\070\020\063\021\071\022\066\001\002" +
    "\000\004\010\237\001\002\000\010\003\ufff1\010\ufff1\036" +
    "\ufff1\001\002\000\004\007\uffe9\001\002\000\004\007\uffe8" +
    "\001\002\000\004\047\011\001\002\000\006\005\225\012" +
    "\uffe6\001\002\000\004\012\uffe7\001\002\000\010\002\ufffc" +
    "\003\ufffc\025\ufffc\001\002\000\004\014\247\001\002\000" +
    "\006\003\uffed\047\uffed\001\002\000\004\007\251\001\002" +
    "\000\016\003\ufff3\010\ufff3\024\ufff3\032\ufff3\036\ufff3\047" +
    "\ufff3\001\002\000\016\003\174\010\uffee\024\167\032\164" +
    "\036\166\047\011\001\002\000\004\010\254\001\002\000" +
    "\010\002\ufffb\003\ufffb\025\ufffb\001\002\000\010\002\ufffa" +
    "\003\ufffa\025\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\155\005\152\001\001\000\002\001\001" +
    "\000\004\021\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\031\021" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\037\016\036\021\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\037\016\040\021\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\130\021\054\001\001\000\006\017\055" +
    "\021\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\113\021" +
    "\054\001\001\000\002\001\001\000\006\017\061\021\054" +
    "\001\001\000\002\001\001\000\006\017\112\021\054\001" +
    "\001\000\006\017\110\021\054\001\001\000\006\017\107" +
    "\021\054\001\001\000\006\017\106\021\054\001\001\000" +
    "\002\001\001\000\006\017\105\021\054\001\001\000\006" +
    "\017\104\021\054\001\001\000\004\021\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\075\021\054" +
    "\001\001\000\004\020\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\101\021\054\001\001\000\004" +
    "\020\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\116" +
    "\021\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\123\021\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\133\021\054\001\001\000" +
    "\002\001\001\000\006\015\135\021\030\001\001\000\002" +
    "\001\001\000\006\015\137\021\030\001\001\000\002\001" +
    "\001\000\006\017\141\021\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\145\021" +
    "\054\001\001\000\002\001\001\000\006\015\147\021\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\157" +
    "\001\001\000\006\004\155\005\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\247\001\001\000\004" +
    "\007\162\001\001\000\014\006\167\010\172\011\164\012" +
    "\171\021\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\205\021\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\202\001\001" +
    "\000\006\010\172\011\177\001\001\000\004\021\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\206\001\001\000\002\001\001\000\006\012\210\021" +
    "\170\001\001\000\004\021\223\001\001\000\002\001\001" +
    "\000\004\007\213\001\001\000\014\006\167\012\171\015" +
    "\037\016\214\021\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\175\001\001\000\006\017\220\021" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\226\014\227\001\001\000\006\012" +
    "\241\021\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\231\001\001\000\014\006" +
    "\167\012\171\015\037\016\232\021\215\001\001\000\002" +
    "\001\001\000\006\017\234\021\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\242\001\001\000\004\013" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\251\001\001\000\014\006\167\010\172\011\252\012\171" +
    "\021\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
				return lexer.next_token(); 
		  
    }

 Lexer lexer;
boolean errorDetected;
public java_cup.runtime.Symbol currentSym;
public Parser(Lexer lex) { super(lex); lexer = lex; errorDetected = false; }
public void syntax_error(Symbol cur_token) { 
				errorDetected = true;
				System.err.println("Parse error at line " + cur_token.left + ", column " + cur_token.right); }
 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					String s = (String)id.getValue();
					RESULT = new Identifier(s, id.getLine(), id.getCol()); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressionChain ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressionChain ::= COMMA expression expressionChain 
            {
              ExpList RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList ec = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ec == null)
							ec = new ExpList();
							
						ec.addElement(e1);
						
						RESULT = ec;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressionChain",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= LEFTPAREN expression RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= EXCLAMATION expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not(e1, e.getLine(), e.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= NEW identifier LEFTPAREN RIGHTPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new NewObject(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= NEW INT LEFTBRACKET expression RIGHTBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new NewArray(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new This(t.getLine(), t.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= identifier 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExp(id.toString(), id.lineNum, id.charNum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = new False(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = new True(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= MINUS INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					Integer x = (Integer) i.getValue();
					RESULT = new IntegerLiteral(x.intValue()*-1, i.getLine(), i.getCol()); 
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= INTEGER 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					Integer x = (Integer) i.getValue();
					RESULT = new IntegerLiteral(x.intValue(), i.getLine(), i.getCol()); 
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression PERIOD identifier LEFTPAREN expression expressionChain RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList ec = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
					//Create a new list and add "e2" as the first argument.  Then add any from the expressionChain
					ExpList list = new ExpList();
					list.addElement(e2);
					
					for(int i = 0; i < ec.size(); i++)
					{
						list.addElement(ec.elementAt(i));
					}
					
					RESULT = new Call(e1, id, list, p.getLine(), p.getCol()); 
			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression PERIOD identifier LEFTPAREN RIGHTPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
					ExpList ec = new ExpList();
					RESULT = new Call(e1, id, ec, p.getLine(), p.getCol()); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression PERIOD LENGTH 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLength(e1, p.getLine(), p.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression LEFTBRACKET expression RIGHTBRACKET 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayLookup(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression STAR expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Times(e1, e2, s.getLine(), s.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression MINUS expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, m.getLine(), m.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression PLUS expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, p.getLine(), p.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression LESSTHAN expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LessThan(e1, e2, l.getLine(), l.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression AND expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new And(e1, e2, a.getLine(), a.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statementChain ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statementChain ::= statement statementChain 
            {
              StatementList RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(sc == null)
							sc = new StatementList();
							
						sc.addElement(stmt);
						
						RESULT = sc;
				   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementChain",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= error SEMICOLON 
            {
              Statement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= identifier LEFTBRACKET expression RIGHTBRACKET ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayAssign(id, e1, e2, a.getLine(), a.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= identifier ASSIGNMENT expression SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Assign(id, e1, a.getLine(), a.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= PRINTLN LEFTPAREN expression RIGHTPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(e1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= WHILE LEFTPAREN expression RIGHTPAREN statement 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(e1, s, l.getLine(), l.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IF LEFTPAREN expression RIGHTPAREN statement ELSE statement 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(e1, s1, s2, l.getLine(), l.getCol()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= LEFTCURLY statementChain RIGHTCURLY 
            {
              Statement RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Block(sc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeChain ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typeChain ::= COMMA type identifier typeChain 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				//Wrap type/id in a Formal
				Formal temp = new Formal(t, id);
				
				if(tc == null)
					tc = new FormalList();
					
				tc.addElement(temp);
				
				RESULT = tc;
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChain",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typeChainParen ::= error RIGHTPAREN 
            {
              FormalList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChainParen",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typeChainParen ::= typeChain RIGHTPAREN 
            {
              FormalList RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = tc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeChainParen",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= identifier 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierType(id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= INT LEFTBRACKET RIGHTBRACKET 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methodDeclarationChain ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methodDeclarationChain ::= methodDeclaration methodDeclarationChain 
            {
              MethodDeclList RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							  if(mdc == null)
								mdc = new MethodDeclList();
								
							  mdc.addElement(md);
						   
							  RESULT = mdc;
						   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclarationChain",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDeclaration ::= error RIGHTCURLY 
            {
              MethodDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDeclaration ::= PUBLIC type identifier LEFTPAREN type identifier typeChainParen LEFTCURLY varDeclarationChain statementChain RETURN expression SEMICOLON RIGHTCURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		FormalList tc = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
						 //Wrap the additional type/id in a Formal
						 Formal temp = new Formal(t2, id2);
						 
						 //Add the first formal to the list, and then add all others from the TypeChain
						 FormalList list = new FormalList();
						 list.addElement(temp);
					  
						 for(int i = 0; i < tc.size(); i++)
						 {
							list.addElement(tc.elementAt(i));
						 }
					  
						 RESULT = new MethodDecl(t, id, list, vdc, sc, e1);
					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclaration ::= PUBLIC type identifier LEFTPAREN RIGHTPAREN LEFTCURLY varDeclarationChain statementChain RETURN expression SEMICOLON RIGHTCURLY 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList sc = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 FormalList list = new FormalList();
						 RESULT = new MethodDecl(t, id, list, vdc, sc, e1);
					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDeclarationChain ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDeclarationChain ::= varDeclarationChain varDeclaration 
            {
              VarDeclList RESULT =null;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
							if(vdc == null)
								vdc = new VarDeclList();
							
							vdc.addElement(vd);
							
							RESULT = vdc;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclarationChain",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDeclaration ::= error identifier SEMICOLON 
            {
              VarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclaration ::= type error SEMICOLON 
            {
              VarDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclaration ::= type identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDecl(t, id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // classDeclarationChain ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // classDeclarationChain ::= classDeclaration classDeclarationChain 
            {
              ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cdc = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
								if(cdc == null)
									cdc = new ClassDeclList();
								
								cdc.addElement(cd);
								
								RESULT = cdc;
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclarationChain",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // classDeclaration ::= error RIGHTCURLY 
            {
              ClassDecl RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDeclaration ::= CLASS identifier EXTENDS identifier LEFTCURLY varDeclarationChain methodDeclarationChain RIGHTCURLY 
            {
              ClassDecl RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDeclaration ::= CLASS identifier LEFTCURLY varDeclarationChain methodDeclarationChain RIGHTCURLY 
            {
              ClassDecl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList vdc = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList mdc = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vdc, mdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDeclaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainClass ::= error RIGHTCURLY RIGHTCURLY 
            {
              MainClass RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainClass ::= CLASS identifier LEFTCURLY PUBLIC STATIC VOID MAIN LEFTPAREN STRING LEFTBRACKET RIGHTBRACKET identifier RIGHTPAREN LEFTCURLY RIGHTCURLY RIGHTCURLY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
				  RESULT = new MainClass(id1, id2, null);
			  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS identifier LEFTCURLY PUBLIC STATIC VOID MAIN LEFTPAREN STRING LEFTBRACKET RIGHTBRACKET identifier RIGHTPAREN LEFTCURLY statement RIGHTCURLY RIGHTCURLY 
            {
              MainClass RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, stmt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mainClass",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclarationChain 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cdcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList cdc = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(mc, cdc); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

