
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 30 15:39:32 CDT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 30 15:39:32 CDT 2018
  */
public class TinyJavaParserST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TinyJavaParserST() {super();}

  /** Constructor which sets the default scanner. */
  public TinyJavaParserST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TinyJavaParserST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\056\002\000\002\002" +
    "\013\000\002\003\003\000\002\003\004\000\002\057\002" +
    "\000\002\004\010\000\002\005\004\000\002\005\002\000" +
    "\002\006\004\000\002\006\003\000\002\007\004\000\002" +
    "\007\003\000\002\010\010\000\002\010\007\000\002\010" +
    "\007\000\002\010\006\000\002\060\002\000\002\011\011" +
    "\000\002\061\002\000\002\011\012\000\002\011\017\000" +
    "\002\011\003\000\002\012\005\000\002\012\004\000\002" +
    "\013\003\000\002\013\003\000\002\014\004\000\002\015" +
    "\006\000\002\015\012\000\002\016\005\000\002\016\004" +
    "\000\002\017\014\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\002\000\002" +
    "\022\005\000\002\022\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\005\000\002\025\004\000\002\025\003" +
    "\000\002\026\003\000\002\026\004\000\002\026\010\000" +
    "\002\026\007\000\002\026\013\000\002\027\005\000\002" +
    "\027\010\000\002\027\011\000\002\030\005\000\002\030" +
    "\002\000\002\031\004\000\002\031\002\000\002\032\003" +
    "\000\002\032\002\000\002\033\005\000\002\033\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\037\003\000" +
    "\002\037\005\000\002\043\003\000\002\043\003\000\002" +
    "\040\003\000\002\040\005\000\002\044\003\000\002\044" +
    "\003\000\002\041\003\000\002\041\004\000\002\046\003" +
    "\000\002\046\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\005\000\002" +
    "\047\003\000\002\047\003\000\002\050\003\000\002\050" +
    "\004\000\002\050\006\000\002\051\006\000\002\051\002" +
    "\000\002\052\006\000\002\052\010\000\002\053\003\000" +
    "\002\054\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\043\005\001\002\000\004\002\336\001" +
    "\002\000\004\046\006\001\002\000\004\024\007\001\002" +
    "\000\004\064\010\001\002\000\004\024\011\001\002\000" +
    "\004\021\012\001\002\000\004\023\013\001\002\000\004" +
    "\037\000\001\002\000\004\037\017\001\002\000\006\002" +
    "\uffff\037\017\001\002\000\006\002\ufffe\037\ufffe\001\002" +
    "\000\004\004\020\001\002\000\010\004\uff9e\026\uff9e\032" +
    "\uff9e\001\002\000\004\032\022\001\002\000\016\004\ufffc" +
    "\033\ufffc\036\ufffc\045\ufffc\054\ufffc\057\ufffc\001\002\000" +
    "\016\004\ufff9\033\ufff9\036\ufff9\045\ufff9\054\ufff9\057\ufff9" +
    "\001\002\000\016\004\020\033\042\036\033\045\025\054" +
    "\031\057\030\001\002\000\004\004\uffdf\001\002\000\004" +
    "\032\uffeb\001\002\000\016\004\ufff7\033\ufff7\036\ufff7\045" +
    "\ufff7\054\ufff7\057\ufff7\001\002\000\012\004\020\036\033" +
    "\045\025\056\317\001\002\000\012\004\020\036\033\045" +
    "\025\057\261\001\002\000\004\023\ufff5\001\002\000\004" +
    "\004\uffde\001\002\000\006\023\uffe8\030\247\001\002\000" +
    "\004\032\052\001\002\000\004\023\051\001\002\000\004" +
    "\004\047\001\002\000\004\004\uffe0\001\002\000\016\004" +
    "\ufffa\033\ufffa\036\ufffa\045\ufffa\054\ufffa\057\ufffa\001\002" +
    "\000\006\002\ufffb\037\ufffb\001\002\000\006\023\uffe7\030" +
    "\044\001\002\000\004\005\045\001\002\000\004\031\046" +
    "\001\002\000\006\023\uffe5\030\uffe5\001\002\000\012\023" +
    "\uff9d\025\uff9d\027\uff9d\030\uff9d\001\002\000\012\023\uffe6" +
    "\025\uffe6\027\uffe6\030\uffe6\001\002\000\016\004\ufff8\033" +
    "\ufff8\036\ufff8\045\ufff8\054\ufff8\057\ufff8\001\002\000\026" +
    "\004\065\032\064\033\uffcb\036\033\042\063\045\025\055" +
    "\062\061\070\062\066\066\057\001\002\000\050\006\uffa1" +
    "\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\027\uffa1\030\uffa1\031\uffa1\034\uffa1\001\002\000" +
    "\024\004\uffd4\032\uffd4\033\uffd4\040\uffd4\042\uffd4\055\uffd4" +
    "\061\uffd4\062\uffd4\066\uffd4\001\002\000\022\004\uffd5\032" +
    "\uffd5\033\uffd5\042\uffd5\055\uffd5\061\uffd5\062\uffd5\066\uffd5" +
    "\001\002\000\004\023\244\001\002\000\004\026\240\001" +
    "\002\000\004\026\235\001\002\000\026\004\065\032\064" +
    "\033\uffcb\036\033\042\063\045\025\055\062\061\070\062" +
    "\066\066\057\001\002\000\024\004\101\005\125\010\107" +
    "\017\105\020\121\026\112\041\122\062\066\063\110\001" +
    "\002\000\004\026\215\001\002\000\016\004\101\032\064" +
    "\042\063\061\070\062\066\066\057\001\002\000\014\004" +
    "\uff9e\024\uff9d\026\uff9c\030\uff9d\034\uff9d\001\002\000\046" +
    "\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\024\uffa5\025\uffa5\027\uffa5\031\uffa5\034\uffa5\001\002\000" +
    "\022\004\101\032\064\033\uffcb\042\063\055\062\061\070" +
    "\062\066\066\057\001\002\000\004\024\200\001\002\000" +
    "\006\024\uffa7\034\165\001\002\000\044\006\uffa6\007\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6" +
    "\027\uffa6\031\uffa6\001\002\000\004\023\164\001\002\000" +
    "\004\024\077\001\002\000\004\033\076\001\002\000\016" +
    "\004\ufff1\033\ufff1\036\ufff1\045\ufff1\054\ufff1\057\ufff1\001" +
    "\002\000\004\004\101\001\002\000\050\006\uffa1\007\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\034\uffa1\001\002\000\052\006" +
    "\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9c\027\uff9d\030\uff9d\031\uff9d\034\uff9d" +
    "\001\002\000\004\026\103\001\002\000\026\004\101\005" +
    "\125\010\107\017\105\020\121\026\112\027\uffc7\041\122" +
    "\062\066\063\110\001\002\000\004\027\157\001\002\000" +
    "\024\004\uffb6\005\uffb6\010\uffb6\017\uffb6\020\uffb6\026\uffb6" +
    "\041\uffb6\062\uffb6\063\uffb6\001\002\000\042\006\uffb0\007" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\027" +
    "\uffb0\031\uffb0\001\002\000\024\004\uffad\005\uffad\010\uffad" +
    "\017\uffad\020\uffad\026\uffad\041\uffad\062\uffad\063\uffad\001" +
    "\002\000\042\006\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\025\uffaa\027\uffaa\031\uffaa\001\002\000\016" +
    "\006\151\007\uffc3\023\uffc3\025\uffc3\027\uffc3\031\uffc3\001" +
    "\002\000\024\004\101\005\125\010\107\017\105\020\121" +
    "\026\112\041\122\062\066\063\110\001\002\000\006\025" +
    "\153\027\uffc8\001\002\000\016\006\uffc1\007\uffc1\023\uffc1" +
    "\025\uffc1\027\uffc1\031\uffc1\001\002\000\010\007\147\025" +
    "\uffc5\027\uffc5\001\002\000\042\006\uffb4\007\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\025\uffb4\027\uffb4\031\uffb4" +
    "\001\002\000\024\004\101\005\125\010\107\017\105\020" +
    "\121\026\112\041\122\062\066\063\110\001\002\000\042" +
    "\006\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\143\022\142\023\uffb8" +
    "\025\uffb8\027\uffb8\031\uffb8\001\002\000\024\004\uffb5\005" +
    "\uffb5\010\uffb5\017\uffb5\020\uffb5\026\uffb5\041\uffb5\062\uffb5" +
    "\063\uffb5\001\002\000\042\006\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\025\uffa9\027\uffa9\031\uffa9\001" +
    "\002\000\044\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\031\uffa7\001\002" +
    "\000\024\004\uffae\005\uffae\010\uffae\017\uffae\020\uffae\026" +
    "\uffae\041\uffae\062\uffae\063\uffae\001\002\000\042\006\uffab" +
    "\007\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\025\uffab" +
    "\027\uffab\031\uffab\001\002\000\044\006\uffac\007\uffac\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\077\025\uffac\027" +
    "\uffac\031\uffac\001\002\000\036\006\uffbf\007\uffbf\011\136" +
    "\012\132\013\133\014\130\015\131\016\135\017\105\020" +
    "\121\023\uffbf\025\uffbf\027\uffbf\031\uffbf\001\002\000\024" +
    "\004\uffbb\005\uffbb\010\uffbb\017\uffbb\020\uffbb\026\uffbb\041" +
    "\uffbb\062\uffbb\063\uffbb\001\002\000\024\004\uffba\005\uffba" +
    "\010\uffba\017\uffba\020\uffba\026\uffba\041\uffba\062\uffba\063" +
    "\uffba\001\002\000\024\004\uffbd\005\uffbd\010\uffbd\017\uffbd" +
    "\020\uffbd\026\uffbd\041\uffbd\062\uffbd\063\uffbd\001\002\000" +
    "\024\004\uffbc\005\uffbc\010\uffbc\017\uffbc\020\uffbc\026\uffbc" +
    "\041\uffbc\062\uffbc\063\uffbc\001\002\000\024\004\101\005" +
    "\125\010\107\017\105\020\121\026\112\041\122\062\066" +
    "\063\110\001\002\000\024\004\uffb9\005\uffb9\010\uffb9\017" +
    "\uffb9\020\uffb9\026\uffb9\041\uffb9\062\uffb9\063\uffb9\001\002" +
    "\000\024\004\uffbe\005\uffbe\010\uffbe\017\uffbe\020\uffbe\026" +
    "\uffbe\041\uffbe\062\uffbe\063\uffbe\001\002\000\024\004\101" +
    "\005\125\010\107\017\105\020\121\026\112\041\122\062" +
    "\066\063\110\001\002\000\042\006\uffb7\007\uffb7\011\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\021\143\022\142\023\uffb7\025\uffb7\027\uffb7\031\uffb7" +
    "\001\002\000\024\004\101\005\125\010\107\017\105\020" +
    "\121\026\112\041\122\062\066\063\110\001\002\000\024" +
    "\004\uffb1\005\uffb1\010\uffb1\017\uffb1\020\uffb1\026\uffb1\041" +
    "\uffb1\062\uffb1\063\uffb1\001\002\000\024\004\uffb2\005\uffb2" +
    "\010\uffb2\017\uffb2\020\uffb2\026\uffb2\041\uffb2\062\uffb2\063" +
    "\uffb2\001\002\000\042\006\uffb3\007\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\025\uffb3\027\uffb3\031\uffb3\001\002" +
    "\000\022\006\uffc0\007\uffc0\017\105\020\121\023\uffc0\025" +
    "\uffc0\027\uffc0\031\uffc0\001\002\000\042\006\uffaf\007\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\027\uffaf" +
    "\031\uffaf\001\002\000\024\004\101\005\125\010\107\017" +
    "\105\020\121\026\112\041\122\062\066\063\110\001\002" +
    "\000\016\006\151\007\uffc4\023\uffc4\025\uffc4\027\uffc4\031" +
    "\uffc4\001\002\000\024\004\101\005\125\010\107\017\105" +
    "\020\121\026\112\041\122\062\066\063\110\001\002\000" +
    "\016\006\uffc2\007\uffc2\023\uffc2\025\uffc2\027\uffc2\031\uffc2" +
    "\001\002\000\024\004\101\005\125\010\107\017\105\020" +
    "\121\026\112\041\122\062\066\063\110\001\002\000\010" +
    "\007\147\025\uffc6\027\uffc6\001\002\000\006\007\147\027" +
    "\156\001\002\000\042\006\uffa8\007\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\025\uffa8\027\uffa8\031\uffa8\001\002" +
    "\000\044\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\027\uff9f\031\uff9f\001\002\000" +
    "\050\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\027\uffa3\030\161\031\uffa3\034\uffa3" +
    "\001\002\000\024\004\101\005\125\010\107\017\105\020" +
    "\121\026\112\041\122\062\066\063\110\001\002\000\006" +
    "\007\147\031\163\001\002\000\050\006\uffa2\007\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\034\uffa2\001\002\000\026\004\uffe9" +
    "\032\uffe9\033\uffe9\036\uffe9\042\uffe9\045\uffe9\055\uffe9\061" +
    "\uffe9\062\uffe9\066\uffe9\001\002\000\030\004\101\005\125" +
    "\010\107\017\105\020\121\026\112\041\122\044\166\051" +
    "\170\062\066\063\110\001\002\000\004\024\174\001\002" +
    "\000\006\007\147\023\uffcf\001\002\000\004\004\020\001" +
    "\002\000\004\026\172\001\002\000\004\027\173\001\002" +
    "\000\004\023\uffce\001\002\000\004\050\175\001\002\000" +
    "\004\026\176\001\002\000\004\027\177\001\002\000\004" +
    "\023\uffcd\001\002\000\004\052\201\001\002\000\004\024" +
    "\202\001\002\000\004\053\203\001\002\000\004\026\204" +
    "\001\002\000\024\004\101\005\125\010\107\017\105\020" +
    "\121\026\112\041\122\062\066\063\110\001\002\000\006" +
    "\007\147\027\206\001\002\000\004\023\207\001\002\000" +
    "\024\004\uffd0\032\uffd0\033\uffd0\040\uffd0\042\uffd0\055\uffd0" +
    "\061\uffd0\062\uffd0\066\uffd0\001\002\000\022\004\uffd6\032" +
    "\uffd6\033\uffd6\042\uffd6\055\uffd6\061\uffd6\062\uffd6\066\uffd6" +
    "\001\002\000\004\033\212\001\002\000\016\004\ufff3\033" +
    "\ufff3\036\ufff3\045\ufff3\054\ufff3\057\ufff3\001\002\000\020" +
    "\004\101\032\064\033\214\042\063\061\070\062\066\066" +
    "\057\001\002\000\024\004\uffd7\032\uffd7\033\uffd7\040\uffd7" +
    "\042\uffd7\055\uffd7\061\uffd7\062\uffd7\066\uffd7\001\002\000" +
    "\024\004\101\005\125\010\107\017\105\020\121\026\112" +
    "\041\122\062\066\063\110\001\002\000\006\007\147\027" +
    "\217\001\002\000\016\004\101\032\064\042\063\061\070" +
    "\062\066\066\057\001\002\000\024\004\uffc9\032\uffc9\033" +
    "\uffc9\040\222\042\uffc9\055\uffc9\061\uffc9\062\uffc9\066\uffc9" +
    "\001\002\000\024\004\uffd2\032\uffd2\033\uffd2\040\uffd2\042" +
    "\uffd2\055\uffd2\061\uffd2\062\uffd2\066\uffd2\001\002\000\016" +
    "\004\101\032\064\042\063\061\070\062\066\066\057\001" +
    "\002\000\024\004\uffca\032\uffca\033\uffca\040\uffca\042\uffca" +
    "\055\uffca\061\uffca\062\uffca\066\uffca\001\002\000\006\007" +
    "\147\023\225\001\002\000\004\033\uffcc\001\002\000\022" +
    "\004\101\032\064\033\uffcb\042\063\055\062\061\070\062" +
    "\066\066\057\001\002\000\004\023\232\001\002\000\004" +
    "\033\231\001\002\000\016\004\ufff2\033\ufff2\036\ufff2\045" +
    "\ufff2\054\ufff2\057\ufff2\001\002\000\026\004\uffea\032\uffea" +
    "\033\uffea\036\uffea\042\uffea\045\uffea\055\uffea\061\uffea\062" +
    "\uffea\066\uffea\001\002\000\004\033\234\001\002\000\016" +
    "\004\ufff4\033\ufff4\036\ufff4\045\ufff4\054\ufff4\057\ufff4\001" +
    "\002\000\026\004\101\005\125\010\107\017\105\020\121" +
    "\026\112\027\uffc7\041\122\062\066\063\110\001\002\000" +
    "\004\027\237\001\002\000\044\006\uffa0\007\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0" +
    "\031\uffa0\001\002\000\024\004\101\005\125\010\107\017" +
    "\105\020\121\026\112\041\122\062\066\063\110\001\002" +
    "\000\006\007\147\027\242\001\002\000\016\004\101\032" +
    "\064\042\063\061\070\062\066\066\057\001\002\000\024" +
    "\004\uffd1\032\uffd1\033\uffd1\040\uffd1\042\uffd1\055\uffd1\061" +
    "\uffd1\062\uffd1\066\uffd1\001\002\000\024\004\uffd3\032\uffd3" +
    "\033\uffd3\040\uffd3\042\uffd3\055\uffd3\061\uffd3\062\uffd3\066" +
    "\uffd3\001\002\000\050\006\uffa4\007\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4\030\161" +
    "\031\uffa4\034\uffa4\001\002\000\006\030\251\034\252\001" +
    "\002\000\004\031\250\001\002\000\006\030\uffe2\034\uffe2" +
    "\001\002\000\004\031\260\001\002\000\004\051\253\001" +
    "\002\000\004\045\254\001\002\000\004\030\255\001\002" +
    "\000\004\005\256\001\002\000\004\031\257\001\002\000" +
    "\006\023\uffe4\030\uffe4\001\002\000\006\030\uffe3\034\uffe3" +
    "\001\002\000\012\004\020\036\033\045\025\065\301\001" +
    "\002\000\004\004\263\001\002\000\004\026\uff9c\001\002" +
    "\000\004\026\ufff0\001\002\000\004\026\266\001\002\000" +
    "\012\004\020\027\uffdc\036\033\045\025\001\002\000\010" +
    "\025\uffd9\027\uffd9\030\uffd9\001\002\000\006\025\276\027" +
    "\uffdd\001\002\000\004\027\275\001\002\000\010\025\uffda" +
    "\027\uffda\030\273\001\002\000\004\031\274\001\002\000" +
    "\010\025\uffd8\027\uffd8\030\uffd8\001\002\000\004\032\uffef" +
    "\001\002\000\010\004\020\036\033\045\025\001\002\000" +
    "\010\025\uffdb\027\uffdb\030\273\001\002\000\004\004\263" +
    "\001\002\000\004\047\302\001\002\000\004\026\303\001" +
    "\002\000\004\060\304\001\002\000\004\035\305\001\002" +
    "\000\004\030\306\001\002\000\004\031\307\001\002\000" +
    "\004\027\310\001\002\000\004\032\uffe1\001\002\000\004" +
    "\026\uffee\001\002\000\004\026\313\001\002\000\012\004" +
    "\020\027\uffdc\036\033\045\025\001\002\000\004\027\315" +
    "\001\002\000\004\032\uffed\001\002\000\004\023\ufff6\001" +
    "\002\000\004\044\320\001\002\000\004\034\321\001\002" +
    "\000\004\051\322\001\002\000\004\056\323\001\002\000" +
    "\004\026\324\001\002\000\004\061\325\001\002\000\004" +
    "\024\326\001\002\000\004\044\327\001\002\000\004\027" +
    "\330\001\002\000\004\023\331\001\002\000\004\054\332" +
    "\001\002\000\004\057\334\001\002\000\004\032\uffec\001" +
    "\002\000\004\065\301\001\002\000\006\002\ufffd\037\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\013\001\001\000\006\003\014\004\015\001\001\000\004" +
    "\004\334\001\001\000\002\001\001\000\004\053\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\022" +
    "\001\001\000\004\005\023\001\001\000\026\006\040\007" +
    "\035\010\026\011\034\013\031\014\033\015\042\017\025" +
    "\020\036\053\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\315\014\033\015\042" +
    "\020\036\053\037\001\001\000\006\020\261\053\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\012\060\013\072\014\033\015" +
    "\042\020\036\024\053\025\066\026\054\027\055\030\074" +
    "\047\073\050\070\052\071\053\037\054\052\055\057\001" +
    "\001\000\004\051\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\013\226\014\033\015\042\020\036\024\053" +
    "\025\225\026\054\027\055\030\227\047\073\050\070\052" +
    "\071\053\037\054\052\055\057\001\001\000\036\034\223" +
    "\035\110\036\113\037\126\040\117\041\115\042\105\043" +
    "\123\046\116\047\125\050\122\052\071\054\052\055\057" +
    "\001\001\000\002\001\001\000\024\024\053\025\212\026" +
    "\054\027\055\047\073\050\070\052\071\054\052\055\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\053\026\207\027\055\030\210\047\073\050\070\052\071" +
    "\054\052\055\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\077\055" +
    "\101\001\001\000\004\051\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\032\103\033\112\034\114\035" +
    "\110\036\113\037\126\040\117\041\115\042\105\043\123" +
    "\046\116\047\125\050\122\052\071\054\052\055\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\034\154\035\110\036\113\037\126\040\117\041\115" +
    "\042\105\043\123\046\116\047\125\050\122\052\071\054" +
    "\052\055\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\145\042" +
    "\105\043\123\046\116\047\125\050\122\052\071\054\052" +
    "\055\057\001\001\000\004\044\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\136\045" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\037\144\040\117\041" +
    "\115\042\105\043\123\046\116\047\125\050\122\052\071" +
    "\054\052\055\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\040\137\041\115\042\105\043\123\046\116" +
    "\047\125\050\122\052\071\054\052\055\057\001\001\000" +
    "\004\044\140\001\001\000\024\041\143\042\105\043\123" +
    "\046\116\047\125\050\122\052\071\054\052\055\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\136\001\001\000\002\001\001\000\034\035" +
    "\147\036\113\037\126\040\117\041\115\042\105\043\123" +
    "\046\116\047\125\050\122\052\071\054\052\055\057\001" +
    "\001\000\002\001\001\000\032\036\151\037\126\040\117" +
    "\041\115\042\105\043\123\046\116\047\125\050\122\052" +
    "\071\054\052\055\057\001\001\000\002\001\001\000\036" +
    "\034\153\035\110\036\113\037\126\040\117\041\115\042" +
    "\105\043\123\046\116\047\125\050\122\052\071\054\052" +
    "\055\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\034\161\035\110\036\113\037\126\040\117\041\115\042" +
    "\105\043\123\046\116\047\125\050\122\052\071\054\052" +
    "\055\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\034\166\035\110\036\113\037\126" +
    "\040\117\041\115\042\105\043\123\046\116\047\125\050" +
    "\122\052\071\054\052\055\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\034\204\035\110\036\113\037\126\040" +
    "\117\041\115\042\105\043\123\046\116\047\125\050\122" +
    "\052\071\054\052\055\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\024\053\026\207\027" +
    "\055\047\073\050\070\052\071\054\052\055\057\001\001" +
    "\000\002\001\001\000\036\034\215\035\110\036\113\037" +
    "\126\040\117\041\115\042\105\043\123\046\116\047\125" +
    "\050\122\052\071\054\052\055\057\001\001\000\002\001" +
    "\001\000\022\024\053\026\217\027\055\047\073\050\070" +
    "\052\071\054\052\055\057\001\001\000\004\031\220\001" +
    "\001\000\002\001\001\000\022\024\053\026\222\027\055" +
    "\047\073\050\070\052\071\054\052\055\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\024\053\026\207\027\055\030\232\047\073\050\070\052" +
    "\071\054\052\055\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\032\235\033\112\034\114" +
    "\035\110\036\113\037\126\040\117\041\115\042\105\043" +
    "\123\046\116\047\125\050\122\052\071\054\052\055\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\034" +
    "\240\035\110\036\113\037\126\040\117\041\115\042\105" +
    "\043\123\046\116\047\125\050\122\052\071\054\052\055" +
    "\057\001\001\000\002\001\001\000\022\024\053\026\242" +
    "\027\055\047\073\050\070\052\071\054\052\055\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\277\053\037\001\001" +
    "\000\004\055\263\001\001\000\002\001\001\000\004\060" +
    "\264\001\001\000\002\001\001\000\016\014\266\020\036" +
    "\021\270\022\267\023\271\053\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\266\020\036\023\276\053\037\001\001\000\002" +
    "\001\001\000\004\055\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\311\001\001\000\002\001\001\000\016" +
    "\014\266\020\036\021\313\022\267\023\271\053\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\332\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TinyJavaParserST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TinyJavaParserST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TinyJavaParserST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TinyJavaParserST$actions {

 SymbolTable currentEnv, env; 
  private final TinyJavaParserST parser;

  /** Constructor */
  CUP$TinyJavaParserST$actions(TinyJavaParserST parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TinyJavaParserST$do_action(
    int                        CUP$TinyJavaParserST$act_num,
    java_cup.runtime.lr_parser CUP$TinyJavaParserST$parser,
    java.util.Stack            CUP$TinyJavaParserST$stack,
    int                        CUP$TinyJavaParserST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TinyJavaParserST$result;

      /* select the action based on the action number */
      switch (CUP$TinyJavaParserST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // functionId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionId",43, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // objectId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("objectId",42, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // classId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = id; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classId",41, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // functionCall ::= object DOT functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionCall",40, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // functionCall ::= functionId LPAREN expressionListOption RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionCall",40, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // subscriptList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptList",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // subscriptList ::= subscriptList LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptList",39, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= object DOT objectId subscriptList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= objectId subscriptList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable ::= THIS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variable",38, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // object ::= functionCall 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("object",37, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // object ::= variable 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("object",37, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primaryExpression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primaryExpression ::= FALSE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primaryExpression ::= TRUE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primaryExpression ::= INTEGER 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primaryExpression ::= object 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("primaryExpression",32, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unaryOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unaryOperator ::= addingOperator 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("unaryOperator",36, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= unaryOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= primaryExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("factor",31, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // multiplyingOperator ::= SLASH 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multiplyingOperator ::= TIMES 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("multiplyingOperator",34, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= term multiplyingOperator factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= factor 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // addingOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("addingOperator",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // addingOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("addingOperator",33, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithmeticExpression ::= arithmeticExpression addingOperator term 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arithmeticExpression ::= term 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arithmeticExpression",29, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relationalOperator ::= NE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relationalOperator ::= EQ 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relationalOperator ::= GE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relationalOperator ::= LE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalOperator",35, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relationalExpression ::= arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalExpression",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relationalExpression ::= arithmeticExpression relationalOperator arithmeticExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("relationalExpression",28, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // andExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("andExpression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // andExpression ::= andExpression AND relationalExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("andExpression",27, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression OR andExpression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressionList ::= expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionList",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressionList ::= expressionList COMMA expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionList",25, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressionListOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionListOption",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressionListOption ::= expressionList 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("expressionListOption",24, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elseOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("elseOption",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elseOption ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("elseOption",23, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // returnStatementOption ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("returnStatementOption",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // returnStatementOption ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("returnStatementOption",22, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignmentStatement ::= variable ASSIGN IN DOT NEXTINT LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignmentStatement ::= variable ASSIGN NEW classId LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignmentStatement ::= variable ASSIGN expression 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("assignmentStatement",21, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= SYSTEM DOT OUT DOT PRINTLN LPAREN expression RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-8)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= IF LPAREN expression RPAREN statement elseOption 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= assignmentStatement SEMICOLON 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= compoundStatement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statementList ::= statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statementList",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statementList ::= statementList statement 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("statementList",19, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // compoundStatement ::= LBRACE statementList RBRACE 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("compoundStatement",18, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argumentDeclaration ::= argumentDeclaration LBRACK RBRACK 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		 
      RESULT = new ArrayDeclarator (decl . id (),
        new ArrayType (0, decl . type ()), 0);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclaration",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argumentDeclaration ::= variableDeclaration 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = new Declarator (decl . id (), decl . type ()); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclaration",17, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argumentDeclarationList ::= argumentDeclaration 
            {
              LinkedList<Type> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
      RESULT = new LinkedList<Type> ();
      RESULT . add (decl . type ());
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argumentDeclarationList ::= argumentDeclarationList COMMA argumentDeclaration 
            {
              LinkedList<Type> RESULT =null;
		int argTypesleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int argTypesright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		LinkedList<Type> argTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type ());
      argTypes . add (decl . type ());
      RESULT = argTypes;
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationList",16, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // argumentDeclarationListOption ::= 
            {
              LinkedList<Type> RESULT =null;
		 RESULT = new LinkedList<Type> (); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argumentDeclarationListOption ::= argumentDeclarationList 
            {
              LinkedList<Type> RESULT =null;
		int argTypesleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int argTypesright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		LinkedList<Type> argTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = argTypes; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("argumentDeclarationListOption",15, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType (); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType (); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= classId 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = new ObjectType (id, env . entry (id)); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // mainDeclaration ::= PUBLIC STATIC VOID MAIN LPAREN STRING ARGS LBRACK RBRACK RPAREN 
            {
              Object RESULT =null;
		
      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("mainDeclaration",13, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-9)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // subscriptDeclarationList ::= LBRACK RBRACK 
            {
              Integer RESULT =null;
		 RESULT = new Integer (1); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptDeclarationList",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subscriptDeclarationList ::= subscriptDeclarationList LBRACK RBRACK 
            {
              Integer RESULT =null;
		int subscriptNumberleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).left;
		int subscriptNumberright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).right;
		Integer subscriptNumber = (Integer)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		 RESULT = new Integer (subscriptNumber . intValue() + 1); 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("subscriptDeclarationList",12, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arrayDeclaration ::= variableDeclaration subscriptDeclarationList ASSIGN NEW INT LBRACK INTEGER RBRACK 
            {
              ArrayDeclarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)).value;
		int subscriptNumberleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)).left;
		int subscriptNumberright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)).right;
		Integer subscriptNumber = (Integer)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)).value;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		String dimension = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      RESULT = new ArrayDeclarator (decl . id (),
        new ArrayType (Integer . parseInt (dimension), decl . type ()),
        subscriptNumber . intValue ());
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arrayDeclaration ::= arrayDeclaration LBRACK INTEGER RBRACK 
            {
              ArrayDeclarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).right;
		ArrayDeclarator decl = (ArrayDeclarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
		int dimensionleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int dimensionright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		String dimension = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      RESULT = new ArrayDeclarator (decl . id (),
        new ArrayType (Integer . parseInt (dimension), decl . type ()),
        decl . subscriptNumber () - 1);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("arrayDeclaration",11, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variableDeclaration ::= type objectId 
            {
              Declarator RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		
      RESULT = new Declarator (id, type);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclaration",10, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variableOrArrayDeclaration ::= arrayDeclaration 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		ArrayDeclarator decl = (ArrayDeclarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 if (decl . subscriptNumber () > 1)
         ErrorMessage . print ("Too few subscripts in initialization");
       else if (decl . subscriptNumber () < 1)
         ErrorMessage . print ("Too many subscripts in initialization");
       RESULT = decl; 
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableOrArrayDeclaration",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variableOrArrayDeclaration ::= variableDeclaration 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		 RESULT = decl; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableOrArrayDeclaration",9, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variableDeclarationList ::= variableOrArrayDeclaration SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variableDeclarationList ::= variableDeclarationList variableOrArrayDeclaration SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      env . enterVar (decl . id (), decl . type ());
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("variableDeclarationList",8, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functionDeclaration ::= mainDeclaration 
            {
              String RESULT =null;
		
      currentEnv . enterFunc ("main", new VoidType (), true, 
        new LinkedList<Type> (), env); 
      RESULT = "main";
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // functionDeclaration ::= STATIC SCANNER IN ASSIGN NEW SCANNER LPAREN SYSTEM DOT IN RPAREN SEMICOLON mainDeclaration 
            {
              String RESULT =null;
		
      currentEnv . enterFunc ("main", new VoidType (), true, 
        new LinkedList<Type> (), env); 
      RESULT = "main";
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-12)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // functionDeclaration ::= PUBLIC STATIC type functionId NT$3 LPAREN argumentDeclarationListOption RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		int argTypesleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int argTypesright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		LinkedList<Type> argTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      /* to allow recursive calls */
      currentEnv . enterFunc (id, type, true, argTypes, env); 
      RESULT = id;
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-7)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
 
      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDeclaration ::= PUBLIC type functionId NT$2 LPAREN argumentDeclarationListOption RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		int argTypesleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int argTypesright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		LinkedList<Type> argTypes = (LinkedList<Type>)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		
      /* to allow recursive calls */
      currentEnv . enterFunc (id, type, false, argTypes, env); 
      RESULT = id;
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDeclaration",7, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-6)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;

      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDefinition ::= functionDeclaration LBRACE returnStatementOption RBRACE 
            {
              Object RESULT =null;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)).value;
		
      currentEnv . enterFuncCode (funcId, ""); /* add code to function entry */
      env = env . parent (); /* restore env */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-3)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionDefinition ::= functionDeclaration LBRACE variableDeclarationList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		
      currentEnv . enterFuncCode (funcId, ""); /* add code to function entry */
      env = env . parent (); /* restore env */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionDefinition ::= functionDeclaration LBRACE statementList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		
      currentEnv . enterFuncCode (funcId, ""); /* add code to function entry */
      env = env . parent (); /* restore env */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functionDefinition ::= functionDeclaration LBRACE variableDeclarationList statementList returnStatementOption RBRACE 
            {
              Object RESULT =null;
		int funcIdleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).left;
		int funcIdright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).right;
		String funcId = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)).value;
		
      currentEnv . enterFuncCode (funcId, ""); /* add code to function entry */
      env = env . parent (); /* restore env */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("functionDefinition",6, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // memberDeclarator ::= variableOrArrayDeclaration 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type (), false);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclarator",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // memberDeclarator ::= STATIC variableOrArrayDeclaration 
            {
              Declarator RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.peek()).value;
		
      env . enterVar (decl . id (), decl . type (), true);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclarator",5, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // memberDeclaration ::= functionDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // memberDeclaration ::= memberDeclarator SEMICOLON 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		Declarator decl = (Declarator)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberDeclaration",4, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // memberList ::= 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // memberList ::= memberList memberDeclaration 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("memberList",3, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classDefinition ::= CLASS classId LBRACE NT$1 memberList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-4)).value;
		
      env = env . parent (); /* restore env */
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinition",2, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-5)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;

      currentEnv = env;                   /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
      currentEnv . enterClass (id, env);
    
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDefinitionList ::= classDefinitionList classDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDefinitionList ::= classDefinition 
            {
              Object RESULT =null;

              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("classDefinitionList",1, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= IMPORT JAVA DOT UTIL DOT TIMES SEMICOLON NT$0 classDefinitionList 
            {
              SymbolTable RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (SymbolTable) ((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		 RESULT = env; 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-8)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              SymbolTable RESULT =null;
 env = new SymbolTable (null); /* start new scope */ 
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          return CUP$TinyJavaParserST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).right;
		SymbolTable start_val = (SymbolTable)((java_cup.runtime.Symbol) CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)).value;
		RESULT = start_val;
              CUP$TinyJavaParserST$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.elementAt(CUP$TinyJavaParserST$top-1)), ((java_cup.runtime.Symbol)CUP$TinyJavaParserST$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TinyJavaParserST$parser.done_parsing();
          return CUP$TinyJavaParserST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

