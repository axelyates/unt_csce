// ***********************************************************************
//
//   DList.h --- defines the base classes DLink and DList, used together 
//              to build all the derived list classes.
//
// Classes included: DLink, DList, DList_iterator.
//
// History --- initial coding 3/14/97 by Philip Sweany
//
// No rights reserved.
//
// ***********************************************************************

#ifndef OBJDLISTH
#define OBJDLISTH

//#include <stream.h>
#include <iostream>
using namespace std;
#include "Boolean.h"


// ***********************************************************************
// 
//   Class DLink --- the element of a doubly linked list.
// 
// ***********************************************************************
class DLink
{
   friend class DList;
   friend class DList_iterator;

    public :

// -----------------------------------------------------------------------
// 
//   DLink --- the constructor
// 
// -----------------------------------------------------------------------
   DLink(); 


// -----------------------------------------------------------------------
// 
//   ~DLink --- the destructor
// 
// -----------------------------------------------------------------------
   virtual  ~DLink();   


// -----------------------------------------------------------------------
// 
//   Insert --- inserts a new element, in front of this one.
// 
// -----------------------------------------------------------------------
   void insert(DLink* element);  


// -----------------------------------------------------------------------
// 
//   Append --- appends a new element, after this one.
// 
// -----------------------------------------------------------------------
   void append(DLink* element);  


// -----------------------------------------------------------------------
// 
//   Duplicate --- make a duplicate of this link.  This is a virtual routine.
// 
// -----------------------------------------------------------------------
   virtual DLink* duplicate();   


// -----------------------------------------------------------------------
// 
//   Equal --- a Boolean method which returns true iff this "matches"
//        the parameter link.
// 
// -----------------------------------------------------------------------
   virtual Boolean equal(DLink* link); 


// -----------------------------------------------------------------------
// 
//   Remove --- removes this element from the list to which it belongs.
// 
// -----------------------------------------------------------------------
   DLink* remove();  


// -----------------------------------------------------------------------
// 
//   Print --- "print" the link.
// 
// -----------------------------------------------------------------------
   virtual void print();


   private:
   DLink* next;
   DLink* previous;

};



// ***********************************************************************
// 
//   Class DList --- the base class for doubly linked lists
// 
// ***********************************************************************
class DList 
{


    public :

// -----------------------------------------------------------------------
// 
//   DList --- the constructor
// 
// -----------------------------------------------------------------------
   DList(); 


// -----------------------------------------------------------------------
// 
//   DList --- the constructor which returns DLists, passes DLists as args, etc.
// 
// -----------------------------------------------------------------------
   DList(DList& l);  


// -----------------------------------------------------------------------
// 
//   ~DList --- the destructor
// 
// -----------------------------------------------------------------------
   ~DList();   


// -----------------------------------------------------------------------
// 
//   Insert --- inserts a new element, at front of the list.
// 
// -----------------------------------------------------------------------
   void insert(DLink* element);  


// -----------------------------------------------------------------------
// 
//   Append --- appends a new element, at the back of the list.
// 
// -----------------------------------------------------------------------
   void append(DLink* element);  


// -----------------------------------------------------------------------
// 
//   Find --- searches the list for an element equal to the incoming
//            DLink and returns a pointer to the element if one is
//            found.  
// 
// -----------------------------------------------------------------------
   DLink* find(DLink* link, Boolean reverse = FALSE); 


// -----------------------------------------------------------------------
// 
//   Size --- returns the size of the list
// 
// -----------------------------------------------------------------------
   int size();


// -----------------------------------------------------------------------
// 
//   Is_empty --- returns True iff this is the empty list.
// 
// -----------------------------------------------------------------------
   Boolean is_empty();


// -----------------------------------------------------------------------
//
//   Front --- return the first element on the list but don't remove it.
//
// -----------------------------------------------------------------------
   DLink* front();
 
 
// -----------------------------------------------------------------------
//
//   Rear --- return the last element on the list but don't remove it.
//
// -----------------------------------------------------------------------
   DLink* rear();
 
// -----------------------------------------------------------------------
//
//   Remove_rear --- remove the last element on the list and return it.
//
// -----------------------------------------------------------------------
   DLink* remove_rear();
 
 
// -----------------------------------------------------------------------
//
//   Remove_front --- remove the first element on the list and return it.
//
// -----------------------------------------------------------------------
   DLink* remove_front();
 
 
// -----------------------------------------------------------------------
// 
//   Remove --- removes this element from the list to which it belongs.
// 
// -----------------------------------------------------------------------
   DLink* remove(DLink* link);   


// -----------------------------------------------------------------------
//
//  Clear --- clears the list, deleting each element of the list.
//
// -----------------------------------------------------------------------
   void clear();
 
 
// -----------------------------------------------------------------------
// 
//   = --- copies a list.
// 
// -----------------------------------------------------------------------
   DList& operator=(DList& l);


// -----------------------------------------------------------------------
// 
//   Print --- "print" the list.
// 
// -----------------------------------------------------------------------
   void print();

   DLink *head;
   DLink *tail;
};



// ***********************************************************************
// 
//   Class DList_iterator --- a class to move through a list, forwards
//                           or backwards.
// 
// ***********************************************************************
class DList_iterator
{
    public :

   DLink* current;


// -----------------------------------------------------------------------
// 
//   DList_iterator --- the constructor
// 
// -----------------------------------------------------------------------
   DList_iterator
   (
      DList& list,
      Boolean reverse = FALSE
   );


// -----------------------------------------------------------------------
// 
//   Next_element(overloaded to ++) --- returns the next element in the list.
// 
// -----------------------------------------------------------------------
   DLink* operator++();


// -----------------------------------------------------------------------
// 
//   Previous_element(overloaded to ++) --- returns previous element in list.
// 
// -----------------------------------------------------------------------
   DLink* operator--();



};

#endif
